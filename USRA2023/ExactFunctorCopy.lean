import Mathlib.CategoryTheory.Limits.Preserves.Finite
import Mathlib.CategoryTheory.Limits.Shapes.Products
import Mathlib.CategoryTheory.Limits.Filtered
import Mathlib.CategoryTheory.Limits.Constructions.LimitsOfProductsAndEqualizers
import Mathlib.CategoryTheory.Abelian.Basic
import Mathlib.CategoryTheory.Adjunction.Limits


namespace CategoryTheory.Functor

open CategoryTheory Limits

variable {C : Type _} [Category C] {D : Type _} [Category D]

/-- TODO-/
class Exact (F : C ‚•§ D) extends PreservesFiniteLimits F, PreservesFiniteColimits F

instance (F : C ‚•§ D) [PreservesFiniteLimits F] [PreservesFiniteColimits F] : Exact F where

example (F : C ‚•§ D) [Exact F] : PreservesFiniteLimits F := inferInstance
example (F : C ‚•§ D) [Exact F] : PreservesFiniteColimits F := inferInstance

/-- TODO-/
def preservesFiniteLimitsOfNatIso (F : C ‚•§ D) {G : C ‚•§ D} [PreservesFiniteLimits F] (h : F ‚âÖ G) :
  PreservesFiniteLimits G where preservesFiniteLimits _ := ‚ü®preservesLimitOfNatIso _ h‚ü©

/-- TODO-/
def preservesFiniteColimitsOfNatIso (F : C ‚•§ D) {G : C ‚•§ D} [PreservesFiniteColimits F] (h : F ‚âÖ G) : 
  PreservesFiniteColimits G where preservesFiniteColimits _ := ‚ü®preservesColimitOfNatIso _ h‚ü©    

/-- TODO-/
def exactOfNatIso (F : C ‚•§ D) {G : C ‚•§ D} [Exact F] (h : F ‚âÖ G) : Exact G := 
  letI : PreservesFiniteLimits G := preservesFiniteLimitsOfNatIso _ h
  letI : PreservesFiniteColimits G := preservesFiniteColimitsOfNatIso _ h
  inferInstance

def exactComp {E : Type _} [Category E] 
  (F : C ‚•§ D) (G : D ‚•§ E) [Exact F] [Exact G] : Exact (F ‚ãô G) := sorry

class AB4 (ùìê : Type _) [Category.{v} ùìê] [Abelian ùìê] [HasCoproducts ùìê] where
  exact (Œ± : Type v) : Exact (colim : (Discrete Œ± ‚•§ ùìê) ‚•§ ùìê)

instance (ùìê : Type _) [Category.{v} ùìê] [Abelian ùìê] [HasCoproducts ùìê] [AB4 ùìê] (Œ± : Type v) : 
  Exact (colim : (Discrete Œ± ‚•§ ùìê) ‚•§ ùìê) := AB4.exact _

class AB5 (ùìê : Type _) [Category.{v} ùìê] [Abelian ùìê] [HasColimits ùìê] where
  exact (J : Type v) [SmallCategory J] [IsFiltered J] : Exact (colim : (J ‚•§ ùìê) ‚•§ ùìê)

/- Might help later? -/
noncomputable instance (ùìê : Type _) [Category.{v} ùìê] [Abelian ùìê] [HasCoproducts ùìê] (Œ± : Type v) : 
    PreservesColimitsOfSize (colim : (Discrete Œ± ‚•§ ùìê) ‚•§ ùìê) := 
  Adjunction.leftAdjointPreservesColimits colimConstAdj

variable {C : Type _} [Category.{v} C] 

example (Œ± : Type _) (S : Set Œ±) (a : Œ±) (ha : a ‚àà S) : S :=
  ‚ü®_, ha‚ü©

noncomputable abbrev coproductColimitDiagramMap {Œ± : Type v} (X : Œ± ‚Üí C)
    [HasFiniteCoproducts C] {S T : Finset Œ±} (h : S ‚â§ T) : 
    ‚àê (fun s : S => X s) ‚ü∂ ‚àê (fun t : T => X t) := 
  Sigma.desc fun s => Sigma.Œπ (fun t : T => X t) ‚ü®s.1, h s.2‚ü© 

@[simps]
noncomputable
def coproductColimitDiagram {Œ± : Type v} (X : Œ± ‚Üí C)
    [HasFiniteCoproducts C] : Finset Œ± ‚•§ C where
  obj S := ‚àê (fun s : S => X s)
  map {S T : Finset Œ±} (i : S ‚ü∂ T) := coproductColimitDiagramMap X i.le

@[simps]
noncomputable
def coproductColimitCocone {Œ± : Type v} (X : Œ± ‚Üí C) [HasColimits C] : 
    Cocone (coproductColimitDiagram X) where
  pt := ‚àê X
  Œπ := {
    app := fun S => show ‚àê (fun s : S => X s) ‚ü∂ ‚àê X from 
      Sigma.desc fun i => Sigma.Œπ _ i.1 }

-- def coproductCoconeFun {Œ± : Type v} (X : Œ± ‚Üí C) [HasColimits C] (c : Cocone (coproductColimitDiagram X)) : 
--   Cocone (Discrete.functor X) where
--   pt := c.pt
--   Œπ := {
--     app := fun I => by {
--       intro a

--     }
--   }

@[simps]
noncomputable
def coproductColimitCoconeIsColimit {Œ± : Type v} (X : Œ± ‚Üí C) [HasColimits C] : 
    IsColimit (coproductColimitCocone X) where
  desc S := Sigma.desc fun a => 
    letI e1 : X a ‚ü∂ ‚àê (fun b : ({a} : Finset Œ±) => X b) := 
      Sigma.Œπ (fun b : ({a} : Finset Œ±) => X b) ‚ü®a, by simp‚ü©
    letI e2 : ‚àê (fun b : ({a} : Finset Œ±) => X b) ‚ü∂ S.pt := S.Œπ.app {a}
    e1 ‚â´ e2
  fac := fun c S => by
    dsimp only [coproductColimitDiagram_obj, coproductColimitCocone_pt, 
      const_obj_obj, coproductColimitCocone_Œπ_app]
    apply Sigma.hom_ext
    rintro ‚ü®b,hb‚ü©   
    simp only [colimit.Œπ_desc_assoc, Discrete.functor_obj, Cofan.mk_pt, 
      Cofan.mk_Œπ_app, colimit.Œπ_desc]
    let e : ({b} : Finset Œ±) ‚ü∂ S := homOfLE (by simpa using hb)
    rw [‚Üê c.w e, ‚Üê Category.assoc] ; congr
    simp
  uniq :=  fun c œÉ h => by {
    dsimp only [coproductColimitCocone_pt]
    apply Sigma.hom_ext
    intros s
    simp only [colimit.Œπ_desc, Cofan.mk_pt, Cofan.mk_Œπ_app, ‚Üê h {s}, 
      coproductColimitDiagram_obj, coproductColimitCocone_pt, const_obj_obj,
      coproductColimitCocone_Œπ_app, colimit.Œπ_desc_assoc, Discrete.functor_obj,
      Cofan.mk_pt, Cofan.mk_Œπ_app]
  }

-- noncomputable
-- def coproductIsoColimit {Œ± : Type v} (X : Œ± ‚Üí C) [HasColimits C] : 
--     ‚àê X ‚âÖ colimit (coproductColimitDiagram X) := 
--   (coproductColimitCoconeIsColimit X).coconePointUniqueUpToIso (colimit.isColimit _)

noncomputable
def coproductIsoColimit {Œ± : Type v} (X : Œ± ‚Üí C) [HasColimits C] : 
    ‚àê X ‚âÖ colimit (coproductColimitDiagram X) where
    hom := Sigma.desc fun a => 
      letI e1 : X a ‚ü∂ ‚àê (fun b : ({a} : Finset Œ±) => X b) := 
        Sigma.Œπ (fun b : ({a} : Finset Œ±) => X b) ‚ü®a, by simp‚ü©
      letI e2 : ‚àê (fun b : ({a} : Finset Œ±) => X b) ‚ü∂ colimit (coproductColimitDiagram X) := 
        colimit.Œπ (coproductColimitDiagram X) {a}
      e1 ‚â´ e2
    inv := colimit.desc (coproductColimitDiagram X) (coproductColimitCocone X)
    inv_hom_id := by 
      ext j
      simp only [coproductColimitDiagram_obj, colimit.Œπ_desc_assoc, coproductColimitCocone_Œπ_app]
      ext jj
      simp only [colimit.Œπ_desc_assoc, Cofan.mk_Œπ_app, colimit.Œπ_desc]
      have leq : {‚Üëjj} ‚â§ j := Iff.mpr Finset.subset_iff (fun _ x =>
       by simp [Finset.eq_of_mem_singleton x])
      rw [‚Üê(colimit.w (coproductColimitDiagram X) <| homOfLE leq)]
      simp
    hom_inv_id := by aesop_cat

-- noncomputable
-- def coproductIsoColimit {Œ± : Type v} (X : Œ± ‚Üí C) [HasColimits C] : 
--     ‚àê X ‚âÖ colimit (coproductColimitDiagram X) where
--     hom := Sigma.desc fun a => 
--       letI e1 : X a ‚ü∂ ‚àê (fun b : ({a} : Finset Œ±) => X b) := 
--         Sigma.Œπ (fun b : ({a} : Finset Œ±) => X b) ‚ü®a, by simp‚ü©
--       letI e2 : ‚àê (fun b : ({a} : Finset Œ±) => X b) ‚ü∂ colimit (coproductColimitDiagram X) := 
--         colimit.Œπ (coproductColimitDiagram X) {a}
--       e1 ‚â´ e2
--     inv := colimit.desc (coproductColimitDiagram X) (coproductColimitCocone X)
--     inv_hom_id := by 
--       ext j; simp
--       ext jj; simp
--       have leq : {‚Üëjj} ‚â§ j := Iff.mpr Finset.subset_iff (fun _ x =>
--        by simp [Finset.eq_of_mem_singleton x])
--       rw [‚Üê(colimit.w (coproductColimitDiagram X) <| homOfLE leq)]
--       simp
--     hom_inv_id := by aesop_cat

noncomputable
def coproductDiagramNatTrans {Œ± : Type v} {X Y : Œ± ‚Üí C} (Œ∑ : X ‚ü∂ Y) [HasColimits C] :
    coproductColimitDiagram X ‚ü∂ coproductColimitDiagram Y where
  app S := Limits.Sigma.map fun b => Œ∑ b

noncomputable
def changeCoproductCocone {Œ± : Type v} {X Y : Œ± ‚Üí C} (Œ∑ : X ‚ü∂ Y) [HasColimits C] :
    Cocone (coproductColimitDiagram X) where
  pt := colimit (coproductColimitDiagram Y)
  Œπ := {
    app := fun S => (coproductDiagramNatTrans Œ∑).app _ ‚â´ colimit.Œπ _ S
    naturality := fun X‚ÇÅ Y‚ÇÅ f => by
      apply Sigma.hom_ext
      intro s
      simp only [coproductDiagramNatTrans]
      rw [‚Üê(colimit.w (coproductColimitDiagram Y) f)]
      simp only [const_obj_obj, coproductColimitDiagram_obj, coproductColimitDiagram_map, colimit.Œπ_desc_assoc,
        Discrete.functor_obj, Cofan.mk_pt, Cofan.mk_Œπ_app, Œπ_colimMap_assoc, Discrete.natTrans_app, const_obj_map,
        Category.comp_id]
    }
  }

noncomputable
def finsetColimitDiagram (Œ± : Type v) [HasColimits C] : 
    (Discrete Œ± ‚•§ C) ‚•§ C  where
  /- (F.obj ‚àò Discrete.mk) vs (fun b => X.obj {as := b})     -/
  obj := fun F => colimit (coproductColimitDiagram (F.obj ‚àò Discrete.mk))
  map := fun {F G} Œ∑ => colimit.desc _ (changeCoproductCocone fun b => Œ∑.app _)
  map_id := fun X => by {
    apply colimit.hom_ext
    intro j‚ÇÅ
    apply colimit.hom_ext
    intro b
    have h : (coproductDiagramNatTrans fun b => ùüô (X.obj { as := b })).app j‚ÇÅ = ùüô _ := by {
      dsimp only [coproductColimitDiagram_obj]
      simp only [coproductDiagramNatTrans]
      ext
      simp
    simp [changeCoproductCocone, h]
  }

noncomputable
def discreteToFinsetMap {Œ± : Type v} [HasColimits C] {F G : Discrete Œ± ‚•§ C} (f : F ‚ü∂ G) :
    F.obj ‚àò Discrete.mk ‚ü∂ G.obj ‚àò Discrete.mk := by {have h := f.app; aesop_cat}
  
noncomputable
def discreteToFinset (Œ± : Type v) [HasColimits C] :
    (Discrete Œ± ‚•§ C) ‚•§ (Finset Œ± ‚•§ C) where
  obj := fun F => coproductColimitDiagram (F.obj ‚àò Discrete.mk)--(fun b => F.obj {as := b}) --
  map := fun {F G} f => coproductDiagramNatTrans (discreteToFinsetMap f)
  map_id := fun X => by 
    ext j
    have h : (coproductDiagramNatTrans fun b => ùüô (X.obj { as := b })).app j = ùüô _ := by {
      dsimp only [coproductColimitDiagram_obj]
      simp only [coproductDiagramNatTrans]
      ext
      simp
    }
    exact h
  }
  map_comp := fun {X Y Z} f g => by {
    simp only [discreteToFinsetMap, coproductDiagramNatTrans]
    aesop_cat
  }

def exactDiscreteToFinset (Œ± : Type v) [HasColimits C] : Exact (discreteToFinset (C := C) Œ±) := sorry

noncomputable
def finsetColimitDiagram' (Œ± : Type v) [HasColimits C] :
    (Finset Œ± ‚•§ C) ‚•§ C := colim 

def actuallyUsefulIso (Œ± : Type v) [HasColimits C] : 
  (colim : (Discrete Œ± ‚•§ C) ‚•§ C) ‚âÖ  
  discreteToFinset Œ± ‚ãô colim := sorry

noncomputable
def coproductFunctorIsoColimit (Œ± : Type v) [HasColimits C] :
    (colim : (Discrete Œ± ‚•§ C) ‚•§ C) ‚âÖ finsetColimitDiagram Œ± :=
  NatIso.ofComponents (fun F => 
    HasColimit.isoOfNatIso (Discrete.natIsoFunctor (F := F))
    ‚â™‚â´ coproductIsoColimit _) 
  sorry

noncomputable
def exactDiscreteToFinset (Œ± : Type v) [HasColimits C] : Exact (discreteToFinset (C := C) Œ±) := sorry

noncomputable instance (Œ± : Type v) : DecidableEq Œ± := Classical.decEq Œ±

noncomputable
instance [Abelian C] [HasColimits C] [AB5 C] : AB4 C := by
  constructor
  intro Œ±
  suffices Exact (discreteToFinset (C := C) Œ± ‚ãô colim) by 
    apply exactOfNatIso _ (actuallyUsefulIso Œ±).symm
  -- letI : IsFiltered (Finset Œ±) := inferInstance
  letI : Exact (colim : (Finset Œ± ‚•§ C) ‚•§ C) := AB5.exact _
  suffices Exact (discreteToFinset (C := C) Œ±) by
    apply exactComp  
  exact (exactDiscreteToFinset Œ±)

end CategoryTheory.Functor